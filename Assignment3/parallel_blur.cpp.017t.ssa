
;; Function __m128 _mm_loadu_ps(const float*) (_Z12_mm_loadu_psPKf)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)



__m128 _mm_loadu_ps(const float*) (const float * __P)
{
  __m128 D.13342;
  __m128 D.13340;

<bb 2>:
  D.13342_2 = __builtin_ia32_loadups (__P_1(D));
  D.13340_3 = D.13342_2;
  return D.13340_3;

}



;; Function void _mm_store_ps(float*, __m128) (_Z12_mm_store_psPfU8__vectorf)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)



void _mm_store_ps(float*, __m128) (float * __P, __m128 __A)
{
<bb 2>:
  MEM[(__v4sf *)__P_1(D)] = __A_2(D);
  return;

}



;; Function __m128 _mm_hadd_ps(__m128, __m128) (_Z11_mm_hadd_psU8__vectorfS_)

__m128 _mm_hadd_ps(__m128, __m128) (__m128 __X, __m128 __Y)
{
  __m128 D.13348;
  __m128 D.13346;

<bb 2>:
  D.13348_3 = __builtin_ia32_haddps (__X_1(D), __Y_2(D));
  D.13346_4 = D.13348_3;
  return D.13346_4;

}



;; Function int printf(const char*, ...) (printf)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)



int printf(const char*, ...) (const char * restrict __fmt)
{
  int D.13081;
  int D.13079;

<bb 2>:
  D.13081_2 = __printf_chk (1, __fmt_1(D), __builtin_va_arg_pack ());
  D.13079_3 = D.13081_2;
  return D.13079_3;

}



;; Function double timestamp() (_Z9timestampv)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 3
Number of blocks to update: 2 ( 67%)



double timestamp() ()
{
  struct timeval tv;
  double D.13402;
  double D.13401;
  __suseconds_t D.13400;
  double D.13399;
  __time_t D.13398;
  double D.13397;

<bb 2>:
  gettimeofday (&tv, 0B);
  D.13398_1 = tv.tv_sec;
  D.13399_2 = (double) D.13398_1;
  D.13400_3 = tv.tv_usec;
  D.13401_4 = (double) D.13400_3;
  D.13402_5 = D.13401_4 * 9.99999999999999954748111825886258685613938723690807819366e-7;
  D.13397_6 = D.13399_2 + D.13402_5;
  return D.13397_6;

}



;; Function const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = int] (_ZSt3maxIiERKT_S2_S2_)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)



const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = int] (const int & __a, const int & __b)
{
  const int & D.13332;
  const int D.13329;
  const int D.13328;

<bb 2>:
  D.13328_3 = *__a_2(D);
  D.13329_5 = *__b_4(D);
  if (D.13328_3 < D.13329_5)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.13332_6 = __b_4(D);
  goto <bb 5>;

<bb 4>:
  D.13332_7 = __a_2(D);

<bb 5>:
  # D.13332_1 = PHI <D.13332_6(3), D.13332_7(4)>
  return D.13332_1;

}



;; Function const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = int] (_ZSt3minIiERKT_S2_S2_)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 6
Number of blocks to update: 5 ( 83%)



const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = int] (const int & __a, const int & __b)
{
  const int & D.13338;
  const int D.13335;
  const int D.13334;

<bb 2>:
  D.13334_3 = *__b_2(D);
  D.13335_5 = *__a_4(D);
  if (D.13334_3 < D.13335_5)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  D.13338_6 = __b_2(D);
  goto <bb 5>;

<bb 4>:
  D.13338_7 = __a_4(D);

<bb 5>:
  # D.13338_1 = PHI <D.13338_6(3), D.13338_7(4)>
  return D.13338_1;

}



;; Function void parallel_blur_block(float*, int, int, int, float*, int*) (_Z19parallel_blur_blockPfiiiS_Pi)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 26
Number of blocks to update: 25 ( 96%)



void parallel_blur_block(float*, int, int, int, float*, int*) (float * out, int r, int c, int n, float * frame, int * radii)
{
  __m128 D.13327;
  __m128 D.13326;
  __m128 D.13325;
  __m128 D.13324;
  __m128 D.13323;
  __m128 D.13322;
  __m128 D.13321;
  __m128 D.13320;
  __m128 D.13319;
  __m128 D.13318;
  __m128 D.13317;
  __m128 D.13316;
  __m128 D.13315;
  __m128 D.13314;
  __m128 D.13313;
  __m128 D.13312;
  __m128 D.13311;
  float * D.13310;
  int col_single;
  int row_single;
  __m128 sum;
  int col_batch;
  __m128 sum;
  int col_batch;
  __m128 sum;
  __m128 sum1;
  int col_batch;
  __m128 sum;
  __m128 sum2;
  __m128 sum1;
  int col_batch;
  int row_batch;
  int row_batch;
  int size;
  int col_size;
  int row_size;
  int col_start;
  int row_start;
  float avg;
  int rd;
  float * temp;
  __m128 v4;
  __m128 v3;
  __m128 v2;
  __m128 v1;
  float D.13309;
  float D.13308;
  float * D.13307;
  float D.13306;
  float * D.13305;
  long unsigned int D.13304;
  long unsigned int D.13303;
  int D.13302;
  int D.13301;
  bool D.13299;
  int D.13298;
  int D.13294;
  bool D.13292;
  int D.13291;
  const float * D.13286;
  long unsigned int D.13285;
  long unsigned int D.13284;
  int D.13283;
  int D.13282;
  int D.13281;
  bool D.13279;
  const float * D.13275;
  long unsigned int D.13274;
  long unsigned int D.13273;
  int D.13272;
  int D.13271;
  const float * D.13270;
  long unsigned int D.13269;
  long unsigned int D.13268;
  int D.13267;
  int D.13266;
  int D.13265;
  bool D.13263;
  const float * D.13259;
  long unsigned int D.13258;
  long unsigned int D.13257;
  int D.13256;
  int D.13255;
  int D.13254;
  int D.13253;
  const float * D.13252;
  long unsigned int D.13251;
  long unsigned int D.13250;
  int D.13249;
  int D.13248;
  int D.13247;
  int D.13246;
  const float * D.13245;
  long unsigned int D.13244;
  long unsigned int D.13243;
  int D.13242;
  int D.13241;
  int D.13240;
  int D.13239;
  int D.13238;
  int D.13237;
  bool D.13235;
  int D.13231;
  float D.13229;
  float D.13228;
  float * D.13227;
  float D.13226;
  float D.13225;
  float * D.13224;
  float D.13223;
  float D.13222;
  float * D.13221;
  float D.13220;
  const float * D.13219;
  long unsigned int D.13218;
  long unsigned int D.13217;
  int D.13216;
  int D.13215;
  int D.13214;
  int D.13213;
  const float * D.13212;
  long unsigned int D.13211;
  long unsigned int D.13210;
  int D.13209;
  int D.13208;
  int D.13207;
  int D.13206;
  const float * D.13205;
  long unsigned int D.13204;
  long unsigned int D.13203;
  int D.13202;
  int D.13201;
  int D.13200;
  int D.13199;
  const float * D.13198;
  long unsigned int D.13197;
  long unsigned int D.13196;
  int D.13195;
  int D.13194;
  int D.13193;
  int D.13192;
  int D.13191;
  int D.13190;
  bool D.13188;
  int D.13187;
  bool D.13182;
  int D.13181;
  int D.13177;
  const int D.13176;
  const int & D.13175;
  const int D.12936;
  int D.13174;
  const int D.12937;
  int D.13173;
  const int D.13172;
  const int & D.13171;
  int D.13170;
  const int D.12933;
  int D.13169;
  const int D.12934;
  const int & D.13168;
  const int D.12930;
  int D.13167;
  const int D.12931;
  const int & D.13166;
  const int D.12927;
  int D.13165;
  const int D.12928;
  int * D.13164;
  long unsigned int D.13163;
  long unsigned int D.13162;
  int D.13161;
  int D.13160;

<bb 2>:
  D.13310_16 = operator new [] (16);
  temp_17 = D.13310_16;
  D.13160_20 = r_18(D) * n_19(D);
  D.13161_22 = D.13160_20 + c_21(D);
  D.13162_23 = (long unsigned int) D.13161_22;
  D.13163_24 = D.13162_23 * 4;
  D.13164_26 = radii_25(D) + D.13163_24;
  rd_27 = *D.13164_26;
  avg_28 = 0.0;
  D.13165_29 = r_18(D) - rd_27;
  D.12928 = D.13165_29;
  D.12927 = 0;
  D.13166_30 = std::max<int> (&D.12927, &D.12928);
  row_start_31 = *D.13166_30;
  D.13167_32 = c_21(D) - rd_27;
  D.12931 = D.13167_32;
  D.12930 = 0;
  D.13168_33 = std::max<int> (&D.12930, &D.12931);
  col_start_34 = *D.13168_33;
  D.13169_35 = r_18(D) + rd_27;
  D.12934 = D.13169_35;
  D.13170_36 = n_19(D) + -1;
  D.12933 = D.13170_36;
  D.13171_37 = std::min<int> (&D.12933, &D.12934);
  D.13172_38 = *D.13171_37;
  D.13173_39 = D.13172_38 - row_start_31;
  row_size_40 = D.13173_39 + 1;
  D.13174_41 = c_21(D) + rd_27;
  D.12937 = D.13174_41;
  D.13170_42 = n_19(D) + -1;
  D.12936 = D.13170_42;
  D.13175_43 = std::min<int> (&D.12936, &D.12937);
  D.13176_44 = *D.13175_43;
  D.13177_45 = D.13176_44 - col_start_34;
  col_size_46 = D.13177_45 + 1;
  size_47 = row_size_40 * col_size_46;
  row_batch_48 = 0;
  goto <bb 7>;

<bb 3>:
  col_batch_51 = 0;
  goto <bb 5>;

<bb 4>:
  D.13190_54 = col_batch_10 * 4;
  D.13191_55 = row_batch_9 * 4;
  D.13192_56 = D.13191_55 + row_start_31;
  D.13193_57 = D.13192_56 * n_19(D);
  D.13194_58 = D.13190_54 + D.13193_57;
  D.13195_59 = D.13194_58 + col_start_34;
  D.13196_60 = (long unsigned int) D.13195_59;
  D.13197_61 = D.13196_60 * 4;
  D.13198_63 = frame_62(D) + D.13197_61;
  D.13311_64 = _mm_loadu_ps (D.13198_63);
  v1_65 = D.13311_64;
  D.13190_66 = col_batch_10 * 4;
  D.13191_67 = row_batch_9 * 4;
  D.13192_68 = D.13191_67 + row_start_31;
  D.13199_69 = D.13192_68 + 1;
  D.13200_70 = D.13199_69 * n_19(D);
  D.13201_71 = D.13190_66 + D.13200_70;
  D.13202_72 = D.13201_71 + col_start_34;
  D.13203_73 = (long unsigned int) D.13202_72;
  D.13204_74 = D.13203_73 * 4;
  D.13205_75 = frame_62(D) + D.13204_74;
  D.13312_76 = _mm_loadu_ps (D.13205_75);
  v2_77 = D.13312_76;
  D.13190_78 = col_batch_10 * 4;
  D.13191_79 = row_batch_9 * 4;
  D.13192_80 = D.13191_79 + row_start_31;
  D.13206_81 = D.13192_80 + 2;
  D.13207_82 = D.13206_81 * n_19(D);
  D.13208_83 = D.13190_78 + D.13207_82;
  D.13209_84 = D.13208_83 + col_start_34;
  D.13210_85 = (long unsigned int) D.13209_84;
  D.13211_86 = D.13210_85 * 4;
  D.13212_87 = frame_62(D) + D.13211_86;
  D.13313_88 = _mm_loadu_ps (D.13212_87);
  v3_89 = D.13313_88;
  D.13190_90 = col_batch_10 * 4;
  D.13191_91 = row_batch_9 * 4;
  D.13192_92 = D.13191_91 + row_start_31;
  D.13213_93 = D.13192_92 + 3;
  D.13214_94 = D.13213_93 * n_19(D);
  D.13215_95 = D.13190_90 + D.13214_94;
  D.13216_96 = D.13215_95 + col_start_34;
  D.13217_97 = (long unsigned int) D.13216_96;
  D.13218_98 = D.13217_97 * 4;
  D.13219_99 = frame_62(D) + D.13218_98;
  D.13314_100 = _mm_loadu_ps (D.13219_99);
  v4_101 = D.13314_100;
  D.13315_102 = _mm_hadd_ps (v1_65, v2_77);
  sum1_103 = D.13315_102;
  D.13316_104 = _mm_hadd_ps (v3_89, v4_101);
  sum2_105 = D.13316_104;
  D.13317_106 = _mm_hadd_ps (sum1_103, sum2_105);
  sum_107 = D.13317_106;
  _mm_store_ps (temp_17, sum_107);
  D.13220_108 = *temp_17;
  D.13221_109 = temp_17 + 4;
  D.13222_110 = *D.13221_109;
  D.13223_111 = D.13220_108 + D.13222_110;
  D.13224_112 = temp_17 + 8;
  D.13225_113 = *D.13224_112;
  D.13226_114 = D.13223_111 + D.13225_113;
  D.13227_115 = temp_17 + 12;
  D.13228_116 = *D.13227_115;
  D.13229_117 = D.13226_114 + D.13228_116;
  avg_118 = D.13229_117 + avg_1;
  col_batch_119 = col_batch_10 + 1;

<bb 5>:
  # avg_1 = PHI <avg_2(3), avg_118(4)>
  # col_batch_10 = PHI <col_batch_51(3), col_batch_119(4)>
  D.13187_52 = col_size_46 / 4;
  D.13188_53 = D.13187_52 > col_batch_10;
  if (D.13188_53 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

<bb 6>:
  row_batch_120 = row_batch_9 + 1;

<bb 7>:
  # avg_2 = PHI <avg_28(2), avg_1(6)>
  # row_batch_9 = PHI <row_batch_48(2), row_batch_120(6)>
  D.13181_49 = row_size_40 / 4;
  D.13182_50 = D.13181_49 > row_batch_9;
  if (D.13182_50 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 8>:
  row_batch_121 = row_size_40 / 4;
  D.13231_122 = row_size_40 % 4;
  switch (D.13231_122) <default: <L19>, case 0: <L18>, case 1: <L14>, case 2: <L10>, case 3: <L6>>

<L6>:
  col_batch_123 = 0;
  goto <bb 11>;

<bb 10>:
  D.13237_126 = col_batch_11 * 4;
  D.13238_127 = row_batch_121 * 4;
  D.13239_128 = D.13238_127 + row_start_31;
  D.13240_129 = D.13239_128 * n_19(D);
  D.13241_130 = D.13237_126 + D.13240_129;
  D.13242_131 = D.13241_130 + col_start_34;
  D.13243_132 = (long unsigned int) D.13242_131;
  D.13244_133 = D.13243_132 * 4;
  D.13245_134 = frame_62(D) + D.13244_133;
  D.13318_135 = _mm_loadu_ps (D.13245_134);
  v1_136 = D.13318_135;
  D.13237_137 = col_batch_11 * 4;
  D.13238_138 = row_batch_121 * 4;
  D.13239_139 = D.13238_138 + row_start_31;
  D.13246_140 = D.13239_139 + 1;
  D.13247_141 = D.13246_140 * n_19(D);
  D.13248_142 = D.13237_137 + D.13247_141;
  D.13249_143 = D.13248_142 + col_start_34;
  D.13250_144 = (long unsigned int) D.13249_143;
  D.13251_145 = D.13250_144 * 4;
  D.13252_146 = frame_62(D) + D.13251_145;
  D.13319_147 = _mm_loadu_ps (D.13252_146);
  v2_148 = D.13319_147;
  D.13237_149 = col_batch_11 * 4;
  D.13238_150 = row_batch_121 * 4;
  D.13239_151 = D.13238_150 + row_start_31;
  D.13253_152 = D.13239_151 + 2;
  D.13254_153 = D.13253_152 * n_19(D);
  D.13255_154 = D.13237_149 + D.13254_153;
  D.13256_155 = D.13255_154 + col_start_34;
  D.13257_156 = (long unsigned int) D.13256_155;
  D.13258_157 = D.13257_156 * 4;
  D.13259_158 = frame_62(D) + D.13258_157;
  D.13320_159 = _mm_loadu_ps (D.13259_158);
  v3_160 = D.13320_159;
  D.13321_161 = _mm_hadd_ps (v1_136, v2_148);
  sum1_162 = D.13321_161;
  D.13322_163 = _mm_hadd_ps (sum1_162, v3_160);
  sum_164 = D.13322_163;
  _mm_store_ps (temp_17, sum_164);
  D.13220_165 = *temp_17;
  D.13221_166 = temp_17 + 4;
  D.13222_167 = *D.13221_166;
  D.13223_168 = D.13220_165 + D.13222_167;
  D.13224_169 = temp_17 + 8;
  D.13225_170 = *D.13224_169;
  D.13226_171 = D.13223_168 + D.13225_170;
  D.13227_172 = temp_17 + 12;
  D.13228_173 = *D.13227_172;
  D.13229_174 = D.13226_171 + D.13228_173;
  avg_175 = D.13229_174 + avg_3;
  col_batch_176 = col_batch_11 + 1;

<bb 11>:
  # avg_3 = PHI <avg_2(9), avg_175(10)>
  # col_batch_11 = PHI <col_batch_123(9), col_batch_176(10)>
  D.13187_124 = col_size_46 / 4;
  D.13235_125 = D.13187_124 > col_batch_11;
  if (D.13235_125 != 0)
    goto <bb 10>;
  else
    goto <bb 19> (<L19>);

<L10>:
  col_batch_177 = 0;
  goto <bb 14>;

<bb 13>:
  D.13265_180 = col_batch_12 * 4;
  D.13238_181 = row_batch_121 * 4;
  D.13239_182 = D.13238_181 + row_start_31;
  D.13240_183 = D.13239_182 * n_19(D);
  D.13266_184 = D.13265_180 + D.13240_183;
  D.13267_185 = D.13266_184 + col_start_34;
  D.13268_186 = (long unsigned int) D.13267_185;
  D.13269_187 = D.13268_186 * 4;
  D.13270_188 = frame_62(D) + D.13269_187;
  D.13323_189 = _mm_loadu_ps (D.13270_188);
  v1_190 = D.13323_189;
  D.13265_191 = col_batch_12 * 4;
  D.13238_192 = row_batch_121 * 4;
  D.13239_193 = D.13238_192 + row_start_31;
  D.13246_194 = D.13239_193 + 1;
  D.13247_195 = D.13246_194 * n_19(D);
  D.13271_196 = D.13265_191 + D.13247_195;
  D.13272_197 = D.13271_196 + col_start_34;
  D.13273_198 = (long unsigned int) D.13272_197;
  D.13274_199 = D.13273_198 * 4;
  D.13275_200 = frame_62(D) + D.13274_199;
  D.13324_201 = _mm_loadu_ps (D.13275_200);
  v2_202 = D.13324_201;
  D.13325_203 = _mm_hadd_ps (v1_190, v2_202);
  sum_204 = D.13325_203;
  _mm_store_ps (temp_17, sum_204);
  D.13220_205 = *temp_17;
  D.13221_206 = temp_17 + 4;
  D.13222_207 = *D.13221_206;
  D.13223_208 = D.13220_205 + D.13222_207;
  D.13224_209 = temp_17 + 8;
  D.13225_210 = *D.13224_209;
  D.13226_211 = D.13223_208 + D.13225_210;
  D.13227_212 = temp_17 + 12;
  D.13228_213 = *D.13227_212;
  D.13229_214 = D.13226_211 + D.13228_213;
  avg_215 = D.13229_214 + avg_4;
  col_batch_216 = col_batch_12 + 1;

<bb 14>:
  # avg_4 = PHI <avg_2(12), avg_215(13)>
  # col_batch_12 = PHI <col_batch_177(12), col_batch_216(13)>
  D.13187_178 = col_size_46 / 4;
  D.13263_179 = D.13187_178 > col_batch_12;
  if (D.13263_179 != 0)
    goto <bb 13>;
  else
    goto <bb 19> (<L19>);

<L14>:
  col_batch_217 = 0;
  goto <bb 17>;

<bb 16>:
  D.13281_220 = col_batch_13 * 4;
  D.13238_221 = row_batch_121 * 4;
  D.13239_222 = D.13238_221 + row_start_31;
  D.13240_223 = D.13239_222 * n_19(D);
  D.13282_224 = D.13281_220 + D.13240_223;
  D.13283_225 = D.13282_224 + col_start_34;
  D.13284_226 = (long unsigned int) D.13283_225;
  D.13285_227 = D.13284_226 * 4;
  D.13286_228 = frame_62(D) + D.13285_227;
  D.13326_229 = _mm_loadu_ps (D.13286_228);
  v1_230 = D.13326_229;
  D.13327_231 = _mm_hadd_ps (v1_230, v1_230);
  sum_232 = D.13327_231;
  _mm_store_ps (temp_17, sum_232);
  D.13220_233 = *temp_17;
  D.13221_234 = temp_17 + 4;
  D.13222_235 = *D.13221_234;
  D.13223_236 = D.13220_233 + D.13222_235;
  avg_237 = D.13223_236 + avg_5;
  col_batch_238 = col_batch_13 + 1;

<bb 17>:
  # avg_5 = PHI <avg_2(15), avg_237(16)>
  # col_batch_13 = PHI <col_batch_217(15), col_batch_238(16)>
  D.13187_218 = col_size_46 / 4;
  D.13279_219 = D.13187_218 > col_batch_13;
  if (D.13279_219 != 0)
    goto <bb 16>;
  else
    goto <bb 19> (<L19>);

<L18>:
  avg_239 = avg_2 + 0.0;

  # avg_6 = PHI <avg_2(8), avg_3(11), avg_4(14), avg_5(17), avg_239(18)>
<L19>:
  row_single_240 = row_start_31;
  goto <bb 24>;

<bb 20>:
  D.13187_243 = col_size_46 / 4;
  D.13294_244 = D.13187_243 * 4;
  col_single_245 = D.13294_244 + col_start_34;
  goto <bb 22>;

<bb 21>:
  D.13301_248 = row_single_14 * n_19(D);
  D.13302_249 = D.13301_248 + col_single_15;
  D.13303_250 = (long unsigned int) D.13302_249;
  D.13304_251 = D.13303_250 * 4;
  D.13305_252 = frame_62(D) + D.13304_251;
  D.13306_253 = *D.13305_252;
  avg_254 = D.13306_253 + avg_7;
  col_single_255 = col_single_15 + 1;

<bb 22>:
  # avg_7 = PHI <avg_8(20), avg_254(21)>
  # col_single_15 = PHI <col_single_245(20), col_single_255(21)>
  D.13298_246 = col_start_34 + col_size_46;
  D.13299_247 = D.13298_246 > col_single_15;
  if (D.13299_247 != 0)
    goto <bb 21>;
  else
    goto <bb 23>;

<bb 23>:
  row_single_256 = row_single_14 + 1;

<bb 24>:
  # avg_8 = PHI <avg_6(19), avg_7(23)>
  # row_single_14 = PHI <row_single_240(19), row_single_256(23)>
  D.13291_241 = row_start_31 + row_size_40;
  D.13292_242 = D.13291_241 > row_single_14;
  if (D.13292_242 != 0)
    goto <bb 20>;
  else
    goto <bb 25>;

<bb 25>:
  D.13160_257 = r_18(D) * n_19(D);
  D.13161_258 = D.13160_257 + c_21(D);
  D.13162_259 = (long unsigned int) D.13161_258;
  D.13163_260 = D.13162_259 * 4;
  D.13307_262 = out_261(D) + D.13163_260;
  D.13308_263 = (float) size_47;
  D.13309_264 = avg_8 / D.13308_263;
  *D.13307_262 = D.13309_264;
  return;

}



;; Function void parallel_blur(float*, int, float*, int*, int) (_Z13parallel_blurPfiS_Pii)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 9
Number of blocks to update: 8 ( 89%)



void parallel_blur(float*, int, float*, int*, int) (float * out, int n, float * frame, int * radii, int nthr)
{
  int c;
  int r;
  bool D.13103;
  bool D.13098;
  int D.13094;
  struct .omp_data_s.0 .omp_data_o.3;

<bb 2>:
  omp_set_num_threads (nthr_3(D));
  .omp_data_o.3.out = out_4(D);
  .omp_data_o.3.frame = frame_5(D);
  .omp_data_o.3.radii = radii_6(D);
  .omp_data_o.3.n = n_7(D);
  .omp_data_o.3.nthr = nthr_3(D);
  __builtin_GOMP_parallel_start (_Z13parallel_blurPfiS_Pii._omp_fn.0, &.omp_data_o.3, 0);
  _Z13parallel_blurPfiS_Pii._omp_fn.0 (&.omp_data_o.3);
  __builtin_GOMP_parallel_end ();
  out_8 = .omp_data_o.3.out;
  frame_9 = .omp_data_o.3.frame;
  radii_10 = .omp_data_o.3.radii;
  n_11 = .omp_data_o.3.n;
  nthr_12 = .omp_data_o.3.nthr;
  D.13094_13 = n_11 / nthr_12;
  r_14 = D.13094_13 * nthr_12;
  goto <bb 7>;

<bb 3>:
  c_16 = 0;
  goto <bb 5>;

<bb 4>:
  parallel_blur_block (out_8, r_1, c_2, n_11, frame_9, radii_10);
  c_18 = c_2 + 1;

<bb 5>:
  # c_2 = PHI <c_16(3), c_18(4)>
  D.13103_17 = c_2 < n_11;
  if (D.13103_17 != 0)
    goto <bb 4>;
  else
    goto <bb 6>;

<bb 6>:
  r_19 = r_1 + 1;

<bb 7>:
  # r_1 = PHI <r_14(2), r_19(6)>
  D.13098_15 = r_1 < n_11;
  if (D.13098_15 != 0)
    goto <bb 3>;
  else
    goto <bb 8>;

<bb 8>:
  return;

}



;; Function void simple_blur(float*, int, float*, int*) (_Z11simple_blurPfiS_Pi)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 15
Number of blocks to update: 14 ( 93%)



void simple_blur(float*, int, float*, int*) (float * out, int n, float * frame, int * radii)
{
  int c2;
  int r2;
  float avg;
  int num;
  int rd;
  int c;
  int r;
  float D.13396;
  float D.13395;
  float * D.13394;
  float D.13393;
  float * D.13392;
  long unsigned int D.13391;
  long unsigned int D.13390;
  int D.13389;
  int D.13388;
  const int D.13386;
  const int & D.13385;
  const int D.12909;
  int D.13384;
  const int D.12910;
  bool retval.5;
  const int & D.13379;
  const int D.12907;
  int D.13378;
  const int D.12908;
  const int D.13376;
  const int & D.13375;
  int D.13374;
  const int D.12904;
  int D.13373;
  const int D.12905;
  bool retval.4;
  const int & D.13368;
  const int D.12899;
  int D.13367;
  const int D.12900;
  int * D.13366;
  long unsigned int D.13365;
  long unsigned int D.13364;
  int D.13363;
  int D.13362;
  bool D.13360;
  bool D.13355;

<bb 2>:
  r_9 = 0;
  goto <bb 13>;

<bb 3>:
  c_12 = 0;
  goto <bb 11>;

<bb 4>:
  D.13362_14 = r_1 * n_10(D);
  D.13363_15 = D.13362_14 + c_2;
  D.13364_16 = (long unsigned int) D.13363_15;
  D.13365_17 = D.13364_16 * 4;
  D.13366_19 = radii_18(D) + D.13365_17;
  rd_20 = *D.13366_19;
  num_21 = 0;
  avg_22 = 0.0;
  D.13367_23 = r_1 - rd_20;
  D.12900 = D.13367_23;
  D.12899 = 0;
  D.13368_24 = std::max<int> (&D.12899, &D.12900);
  r2_25 = *D.13368_24;
  goto <bb 9>;

<bb 5>:
  D.13378_31 = c_2 - rd_20;
  D.12908 = D.13378_31;
  D.12907 = 0;
  D.13379_32 = std::max<int> (&D.12907, &D.12908);
  c2_33 = *D.13379_32;
  goto <bb 7>;

<bb 6>:
  D.13388_39 = r2_7 * n_10(D);
  D.13389_40 = D.13388_39 + c2_8;
  D.13390_41 = (long unsigned int) D.13389_40;
  D.13391_42 = D.13390_41 * 4;
  D.13392_44 = frame_43(D) + D.13391_42;
  D.13393_45 = *D.13392_44;
  avg_46 = D.13393_45 + avg_5;
  num_47 = num_3 + 1;
  c2_48 = c2_8 + 1;

<bb 7>:
  # num_3 = PHI <num_4(5), num_47(6)>
  # avg_5 = PHI <avg_6(5), avg_46(6)>
  # c2_8 = PHI <c2_33(5), c2_48(6)>
  D.13384_34 = c_2 + rd_20;
  D.12910 = D.13384_34;
  D.13374_35 = n_10(D) + -1;
  D.12909 = D.13374_35;
  D.13385_36 = std::min<int> (&D.12909, &D.12910);
  D.13386_37 = *D.13385_36;
  retval.5_38 = D.13386_37 >= c2_8;
  if (retval.5_38 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  r2_49 = r2_7 + 1;

<bb 9>:
  # num_4 = PHI <num_21(4), num_3(8)>
  # avg_6 = PHI <avg_22(4), avg_5(8)>
  # r2_7 = PHI <r2_25(4), r2_49(8)>
  D.13373_26 = r_1 + rd_20;
  D.12905 = D.13373_26;
  D.13374_27 = n_10(D) + -1;
  D.12904 = D.13374_27;
  D.13375_28 = std::min<int> (&D.12904, &D.12905);
  D.13376_29 = *D.13375_28;
  retval.4_30 = D.13376_29 >= r2_7;
  if (retval.4_30 != 0)
    goto <bb 5>;
  else
    goto <bb 10>;

<bb 10>:
  D.13362_50 = r_1 * n_10(D);
  D.13363_51 = D.13362_50 + c_2;
  D.13364_52 = (long unsigned int) D.13363_51;
  D.13365_53 = D.13364_52 * 4;
  D.13394_55 = out_54(D) + D.13365_53;
  D.13395_56 = (float) num_4;
  D.13396_57 = avg_6 / D.13395_56;
  *D.13394_55 = D.13396_57;
  c_58 = c_2 + 1;

<bb 11>:
  # c_2 = PHI <c_12(3), c_58(10)>
  D.13360_13 = c_2 < n_10(D);
  if (D.13360_13 != 0)
    goto <bb 4>;
  else
    goto <bb 12>;

<bb 12>:
  r_59 = r_1 + 1;

<bb 13>:
  # r_1 = PHI <r_9(2), r_59(12)>
  D.13355_11 = r_1 < n_10(D);
  if (D.13355_11 != 0)
    goto <bb 3>;
  else
    goto <bb 14>;

<bb 14>:
  return;

}



;; Function int main(int, char**) (main)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 28
Number of blocks to update: 27 ( 96%)



int main(int, char**) (int argc, char * * argv)
{
  float * D.13078;
  float * D.13077;
  float * D.13076;
  int * D.13075;
  float dif;
  int j;
  int i;
  double time2;
  float * out2;
  int nthr;
  int i;
  int i;
  double time;
  float * out;
  float * frame;
  int * radii;
  int n;
  int D.13073;
  double D.13060;
  double D.13059;
  int D.13058;
  int * D.13057;
  bool D.13054;
  float D.13053;
  float D.13052;
  float * D.13051;
  float D.13050;
  float * D.13049;
  long unsigned int D.13048;
  long unsigned int D.13047;
  int D.13046;
  int D.13045;
  bool D.13043;
  bool D.13038;
  double D.13034;
  long unsigned int D.13033;
  long unsigned int D.13032;
  bool D.13030;
  double D.13026;
  long unsigned int D.13025;
  long unsigned int D.13024;
  float D.13023;
  int D.13022;
  int D.13021;
  float * D.13020;
  long unsigned int D.13019;
  long unsigned int D.13018;
  bool D.13016;
  long unsigned int D.13012;
  long unsigned int D.13011;
  int D.13010;
  int D.13009;
  int D.13008;
  int D.13007;
  int D.13006;
  int * D.13005;
  long unsigned int D.13004;
  long unsigned int D.13003;
  bool D.13001;
  long unsigned int D.12997;
  long unsigned int D.12996;
  int D.12995;

<bb 2>:
  srand (0);
  n_6 = 3000;
  D.12995_7 = n_6 * n_6;
  D.12996_8 = (long unsigned int) D.12995_7;
  D.12997_9 = D.12996_8 * 4;
  D.13075_10 = operator new [] (D.12997_9);
  radii_11 = D.13075_10;
  i_12 = 0;
  goto <bb 4>;

<bb 3>:
  D.13003_15 = (long unsigned int) i_1;
  D.13004_16 = D.13003_15 * 4;
  D.13005_17 = radii_11 + D.13004_16;
  D.13006_18 = i_1 * 6;
  D.12995_19 = n_6 * n_6;
  D.13007_20 = D.13006_18 / D.12995_19;
  D.13008_21 = rand ();
  D.13009_22 = D.13008_21 % 6;
  D.13010_23 = D.13007_20 + D.13009_22;
  *D.13005_17 = D.13010_23;
  i_24 = i_1 + 1;

<bb 4>:
  # i_1 = PHI <i_12(2), i_24(3)>
  D.12995_13 = n_6 * n_6;
  D.13001_14 = D.12995_13 > i_1;
  if (D.13001_14 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

<bb 5>:
  D.12995_25 = n_6 * n_6;
  D.13011_26 = (long unsigned int) D.12995_25;
  D.13012_27 = D.13011_26 * 4;
  D.13076_28 = operator new [] (D.13012_27);
  frame_29 = D.13076_28;
  i_30 = 0;
  goto <bb 7>;

<bb 6>:
  D.13018_33 = (long unsigned int) i_2;
  D.13019_34 = D.13018_33 * 4;
  D.13020_35 = frame_29 + D.13019_34;
  D.13021_36 = rand ();
  D.13022_37 = D.13021_36 % 256;
  D.13023_38 = (float) D.13022_37;
  *D.13020_35 = D.13023_38;
  i_39 = i_2 + 1;

<bb 7>:
  # i_2 = PHI <i_30(5), i_39(6)>
  D.12995_31 = n_6 * n_6;
  D.13016_32 = D.12995_31 > i_2;
  if (D.13016_32 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  D.12995_40 = n_6 * n_6;
  D.13024_41 = (long unsigned int) D.12995_40;
  D.13025_42 = D.13024_41 * 4;
  D.13077_43 = operator new [] (D.13025_42);
  out_44 = D.13077_43;
  time_45 = timestamp ();
  simple_blur (out_44, n_6, frame_29, radii_11);
  D.13026_46 = timestamp ();
  time_47 = D.13026_46 - time_45;
  printf ("Time needed for naive blur = %.3f seconds.\n", time_47);
  nthr_48 = 1;
  goto <bb 20>;

<bb 9>:
  D.12995_50 = n_6 * n_6;
  D.13032_51 = (long unsigned int) D.12995_50;
  D.13033_52 = D.13032_51 * 4;
  D.13078_53 = operator new [] (D.13033_52);
  out2_54 = D.13078_53;
  time2_55 = timestamp ();
  parallel_blur (out2_54, n_6, frame_29, radii_11, nthr_3);
  D.13034_56 = timestamp ();
  time2_57 = D.13034_56 - time2_55;
  i_58 = 0;
  goto <bb 16>;

<bb 10>:
  j_60 = 0;
  goto <bb 14>;

<bb 11>:
  D.13045_62 = i_4 * n_6;
  D.13046_63 = D.13045_62 + j_5;
  D.13047_64 = (long unsigned int) D.13046_63;
  D.13048_65 = D.13047_64 * 4;
  D.13049_66 = out_44 + D.13048_65;
  D.13050_67 = *D.13049_66;
  D.13045_68 = i_4 * n_6;
  D.13046_69 = D.13045_68 + j_5;
  D.13047_70 = (long unsigned int) D.13046_69;
  D.13048_71 = D.13047_70 * 4;
  D.13051_72 = out2_54 + D.13048_71;
  D.13052_73 = *D.13051_72;
  dif_74 = D.13050_67 - D.13052_73;
  D.13053_75 = dif_74 * dif_74;
  D.13054_76 = D.13053_75 > 1.0e+0;
  if (D.13054_76 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

<bb 12>:
  printf ("Your blur does not give the right result!\n");
  D.13045_77 = i_4 * n_6;
  D.13046_78 = D.13045_77 + j_5;
  D.13047_79 = (long unsigned int) D.13046_78;
  D.13048_80 = D.13047_79 * 4;
  D.13057_81 = radii_11 + D.13048_80;
  D.13058_82 = *D.13057_81;
  printf ("For element (row, column, radii) = (%d, %d, %d):\n", i_4, j_5, D.13058_82);
  D.13045_83 = i_4 * n_6;
  D.13046_84 = D.13045_83 + j_5;
  D.13047_85 = (long unsigned int) D.13046_84;
  D.13048_86 = D.13047_85 * 4;
  D.13049_87 = out_44 + D.13048_86;
  D.13050_88 = *D.13049_87;
  D.13059_89 = (double) D.13050_88;
  printf ("  Simple blur gives %.2f\n", D.13059_89);
  D.13045_90 = i_4 * n_6;
  D.13046_91 = D.13045_90 + j_5;
  D.13047_92 = (long unsigned int) D.13046_91;
  D.13048_93 = D.13047_92 * 4;
  D.13051_94 = out2_54 + D.13048_93;
  D.13052_95 = *D.13051_94;
  D.13060_96 = (double) D.13052_95;
  printf ("  Your blur gives %.2f\n", D.13060_96);
  exit (-1);

<bb 13>:
  j_97 = j_5 + 1;

<bb 14>:
  # j_5 = PHI <j_60(10), j_97(13)>
  D.13043_61 = j_5 < n_6;
  if (D.13043_61 != 0)
    goto <bb 11>;
  else
    goto <bb 15>;

<bb 15>:
  i_98 = i_4 + 1;

<bb 16>:
  # i_4 = PHI <i_58(9), i_98(15)>
  D.13038_59 = i_4 < n_6;
  if (D.13038_59 != 0)
    goto <bb 10>;
  else
    goto <bb 17>;

<bb 17>:
  if (out2_54 != 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

<bb 18>:
  operator delete [] (out2_54);

<bb 19>:
  printf ("Time needed for parallel blur with %d threads = %.3f seconds.\n", nthr_3, time2_57);
  nthr_99 = nthr_3 + 1;

<bb 20>:
  # nthr_3 = PHI <nthr_48(8), nthr_99(19)>
  D.13030_49 = nthr_3 <= 16;
  if (D.13030_49 != 0)
    goto <bb 9>;
  else
    goto <bb 21>;

<bb 21>:
  if (radii_11 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

<bb 22>:
  operator delete [] (radii_11);

<bb 23>:
  if (frame_29 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

<bb 24>:
  operator delete [] (frame_29);

<bb 25>:
  if (out_44 != 0B)
    goto <bb 26>;
  else
    goto <bb 27>;

<bb 26>:
  operator delete [] (out_44);

<bb 27>:
  D.13073_100 = 0;
  return D.13073_100;

}



;; Function <built-in> (_Z13parallel_blurPfiS_Pii._omp_fn.0)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 22
Number of blocks to update: 5 ( 23%)



<built-in> (struct .omp_data_s.0 * .omp_data_i)
{
  int * * D.13536;
  float * * D.13535;
  int * D.13534;
  float * * D.13533;
  struct .omp_data_s.1 .omp_data_o.2;
  int id;
  int block;
  int D.13529;
  int D.13528;

<bb 21>:

<bb 3>:
  D.13528_2 = .omp_data_i_1(D)->nthr;
  D.13529_3 = .omp_data_i_1(D)->n;
  block_4 = D.13529_3 / D.13528_2;
  id_5 = __builtin_omp_get_thread_num ();
  .omp_data_o.2.id = id_5;
  .omp_data_o.2.block = block_4;
  D.13533_6 = &.omp_data_i_1(D)->out;
  .omp_data_o.2.out = D.13533_6;
  D.13534_7 = &.omp_data_i_1(D)->n;
  .omp_data_o.2.n = D.13534_7;
  D.13535_8 = &.omp_data_i_1(D)->frame;
  .omp_data_o.2.frame = D.13535_8;
  D.13536_9 = &.omp_data_i_1(D)->radii;
  .omp_data_o.2.radii = D.13536_9;

<bb 20>:
  __builtin_GOMP_task (_Z13parallel_blurPfiS_Pii._omp_fn.1, &.omp_data_o.2, 0B, 40, 8, 1, 0);

<bb 11>:
  return;

}



;; Function <built-in> (_Z13parallel_blurPfiS_Pii._omp_fn.1)



Symbols to be put in SSA form

{ .MEM }


Incremental SSA update started at block: 0

Number of blocks in CFG: 20
Number of blocks to update: 9 ( 45%)



<built-in> (struct .omp_data_s.1 * .omp_data_i)
{
  float * D.13523;
  float * * D.13522;
  int D.13521;
  int * D.13520;
  float * D.13519;
  float * * D.13518;
  int * D.13517;
  int * * D.13516;
  bool D.13515;
  int D.13514;
  int * D.13513;
  int c;
  bool D.13511;
  int D.13510;
  int D.13509;
  int r;
  int block;
  int id;

<bb 19>:

<bb 4>:
  id_4 = .omp_data_i_3(D)->id;
  block_5 = .omp_data_i_3(D)->block;
  r_6 = block_5 * id_4;

<bb 9>:
  # r_1 = PHI <r_6(4), r_14(8)>
  D.13509_7 = id_4 + 1;
  D.13510_8 = D.13509_7 * block_5;
  D.13511_9 = D.13510_8 > r_1;
  if (D.13511_9 != 0)
    goto <bb 5>;
  else
    goto <bb 10>;

<bb 10>:
  return;

<bb 5>:
  c_10 = 0;

<bb 7>:
  # c_2 = PHI <c_10(5), c_23(6)>
  D.13513_11 = .omp_data_i_3(D)->n;
  D.13514_12 = *D.13513_11;
  D.13515_13 = c_2 < D.13514_12;
  if (D.13515_13 != 0)
    goto <bb 6>;
  else
    goto <bb 8>;

<bb 8>:
  r_14 = r_1 + 1;
  goto <bb 9>;

<bb 6>:
  D.13516_15 = .omp_data_i_3(D)->radii;
  D.13517_16 = *D.13516_15;
  D.13518_17 = .omp_data_i_3(D)->frame;
  D.13519_18 = *D.13518_17;
  D.13520_19 = .omp_data_i_3(D)->n;
  D.13521_20 = *D.13520_19;
  D.13522_21 = .omp_data_i_3(D)->out;
  D.13523_22 = *D.13522_21;
  parallel_blur_block (D.13523_22, r_1, c_2, D.13521_20, D.13519_18, D.13517_16);
  c_23 = c_2 + 1;
  goto <bb 7>;

}


